#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('XDChat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
// var WebSocketServer = require('ws').Server,
// wss = new WebSocketServer({server: server});
/**
 * Create HTTP server.
 */
//-----------------------------------




server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//-----------server服务器----------------------

var connectuser = {};
var connectnumber = 0;
var singlechat = {};
var wsc = {};
var io = require('socket.io').listen(server);
io.on('connection', function(socket) {
// // 有socket连入
    // socket.on('Channel_opened',function(data){
    //   console.log(data.s);
    // })





    socket.on('message', function(message) {
        console.log((new Date()) + ' Received Message, broadcasting: ' + message);
        socket.broadcast.emit('message', message);
    });

    // When the user hangs up
    // broadcast bye signal to all users in the room
    socket.on('disconnect', function() {
        // close user connection
        console.log((new Date()) + " Peer disconnected.");
        socket.broadcast.emit('user disconnected');
    });
    // socket.on('_offer',function(data){
    //   console.log(data);
    // });




    socket.on('link',function(link){
        socket.name = link.id;
        if(!connectuser.hasOwnProperty(link.id)){

          connectuser[link.id] = {from:link.from,type:link.type,iswork:"not working"};
          connectnumber++;
        }
        console.log("1"+link.type+"1");
        io.emit('link', {connectuser:connectuser,connectnumber:connectnumber,userinfo:link});
        console.log(link.from+'加入了聊天室');
    });
    socket.on('Meg', function(data) {  
        console.log(data.context);
        io.emit('Meg',{from:data.from,context:data.context});
    }); 
    socket.on('logout', function(){
    //将退出的用户从在线列表中删除
      if(connectuser.hasOwnProperty(socket.name)) {
        //退出用户的信息
        var obj = {id:socket.name,name:connectuser[socket.name].from};
      
        //删除
        delete connectuser[socket.name];
        //在线人数-1
        connectnumber--;
      
        //向所有客户端广播用户退出
        io.emit('logout', {connectuser:connectuser,connectnumber:connectnumber,userinfo:obj});
        console.log(obj.name+'退出了聊天室');
      }
    });
    socket.on('singlechat',function(data){
        var id = data.id;
            name  = data.from;
            type = data.type;
            to = data.to;
        for(var i in connectuser){
            if(connectuser[i].from == to){
              connectuser[i].iswork = "working";
            }
        }
        if(!singlechat.hasOwnProperty(name)){
          singlechat[name] = to;
          singlechat[to] = name;
        }
        
        io.emit('singlechat', {connectuser:connectuser,name:name,to:to,singlechat:singlechat});  
        console.log(name+'请求'+to+'客服服务');
        for(var i in singlechat)
          console.log("singlechat:"+singlechat[i]+'\n');

    });
    // socket.on('singlechatinit',function(data){
    //   console.log(data.from);
    //   io.emit('singlechatinit',{
    //     name:data.from,
    //     to:singlechat[data.from]
    //   })
    // })
    socket.on('singlechatMeg',function(data){
        var name  = data.from;
            context = data.context;
            to = data.to;
        io.emit('singlechatMeg', {name:name,to:to,context:context});
         //console.log(context);
    });
    socket.on('singlechatexit',function(data){
      var name = data.from;
      var to = data.to;
      if(singlechat.hasOwnProperty(name))
        delete singlechat[name];
      if(singlechat.hasOwnProperty(to))
        delete singlechat[to];
      for(var i in connectuser){
            if(connectuser[i].from == to&&connectuser[i].type === "service"){
              connectuser[i].iswork = "not working";
            }else if(connectuser[i].from == name&&connectuser[i].type === "service"){
              connectuser[i].iswork = "not working";
            }
        }
      io.emit('exit', {connectuser:connectuser,name:name,to:to});
      io.emit('singlechatexit',{name:name,to:to});
      console.log(name+" "+to+'客服服务结束');
    });
    // socket.on('video',function(data){
    //   var name = data.name;
    //   var to = data.to;
    //   console.log(data.localMediaStream);
    //   io.emit('video',{
    //     name:name,to:to,localMediaStream:data.localMediaStream
    //   });
    //  });
    // socket.on('message', function(message) {
    //     var json = JSON.parse(message);
    //     console.log('received (' + desc + '): ', json);
    //     io.emit('message', function (error) {
    //         if (error) {
    //             console.log('Send message error (' + desc + '): ', error);
    //         }
    //     });
    // });
  
  

});  
//---------------------------------------------------
/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
