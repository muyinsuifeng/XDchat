#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('XDChat:server');
var http = require('http');
var history_message = require('../database/history_message');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
// var WebSocketServer = require('ws').Server,
// wss = new WebSocketServer({server: server});
/**
 * Create HTTP server.
 */
//-----------------------------------




server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//-----------server服务器----------------------

var connectuser = {};
var connectnumber = 0;
var singlechat = {};
var room = [];
var temporary_room = [];
var flag = 0;
var io = require('socket.io').listen(server);
var history_socekt = [];
io.on('connection', function(socket) {
    console.log( "a socket connected" );
    //接收用户发来的图片
    socket.on('img', function(imgData) {
      console.log(imgData.from);
    //通过一个newImg事件分发到除自己外的每个用户
      io.emit('img', {data:imgData});
    } );
    // socket.on("files",function(data){
    //     for(var i in room){
    //       if(socket.id === room[i][0].id ){
    //       	room[i][1].emit('files',{
    //       							from: data.from,
    //       							files:data.files});
    //       }
    //       else if(socket.id === room[i][1].id ){
    //         room[i][0].emit('files',{
    //         						from: data.from,
    //       							files:data.files});
    //       }
    //     }
        
    // });
    socket.on('singlechatimg', function(imgData) {
      console.log(imgData.from);
    //通过一个newImg事件分发到除自己外的每个用户
    for(var i in room){
          if(socket.id === room[i][0].id ||socket.id === room[i][1].id ){
            console.log("room_send_Meg");
            room[i][0].emit('singlechatimg', {data:imgData});
            room[i][1].emit('singlechatimg', {data:imgData});
          }
        }
    } );
    

    socket.on("singlechat_room",function(){
      for(var i in room){
          console.log("singlechat_room_before:"+room[i][0].id+":"+room[i][1].id);
        }
      if(flag == 0){
          console.log("flag == 0");
          temporary_room.push(socket);
          flag++;
        }
        else {
          console.log("flag != 0");
          temporary_room.push(socket);
          room.push(temporary_room);
          temporary_room = [];
          flag = 0;
         }
        for(var i in room){
          console.log("singlechat_room_after:"+room[i][0].id+":"+room[i][1].id);
        }
      });
    socket.on('message', function(message) {
        console.log((new Date()) + ' Received Message, broadcasting: ' + message);
        for(var i in room){
          console.log('message:'+room[i][0].id+":"+room[i][1].id);
          console.log('message:'+socket.id);
        }
        for(var i in room){
          if(socket.id === room[i][0].id ||socket.id === room[i][1].id ){
            console.log("room_send_Meg");
            room[i][0].emit('message', message);
            room[i][1].emit('message', message);
          }
        }
        
        //socket.broadcast.emit('message', message);
    });

    // When the user hangs up
    // broadcast bye signal to all users in the room
    socket.on('disconnect', function() {
        // close user connection
        console.log((new Date()) + " Peer disconnected.");
        for(var i in room){
          console.log('disconnect_before:'+room[i][0].id+":"+room[i][1].id);
        }
        for(var i in room){
          if(socket.id === room[i][0].id ||socket.id === room[i][1].id ){
            room[i][0].emit('user disconnected');
            room[i][1].emit('user disconnected');
            room.splice(i, 1);
          }
        }
        for(var i in room){
          console.log('disconnect_after:'+room[i][0].id+":"+room[i][1].id);
        }
        //socket.broadcast.emit('user disconnected');
    });




    socket.on('link',function(link){
        socket.name = link.id;
        if(!connectuser.hasOwnProperty(link.id)){
          connectuser[link.id] = {from:link.from,type:link.type,iswork:"not working"};
          connectnumber++;
          console.log("1"+link.type+"1");
          io.emit('link', {connectuser:connectuser,connectnumber:connectnumber,userinfo:link});
          console.log(link.from+'加入了聊天室');
        }
    });
    socket.on('Meg', function(data) {  
        console.log(data.context);
        io.emit('Meg',{from:data.from,context:data.context});
    }); 
    socket.on('logout', function(){
    //将退出的用户从在线列表中删除
      if(connectuser.hasOwnProperty(socket.name)) {
        //退出用户的信息
        var obj = {id:socket.name,name:connectuser[socket.name].from};
      
        //删除
        delete connectuser[socket.name];
        //在线人数-1
        connectnumber--;
      
        //向所有客户端广播用户退出
        io.emit('logout', {connectuser:connectuser,connectnumber:connectnumber,userinfo:obj});
        console.log(obj.name+'退出了聊天室');
      }
    });
    socket.on("singlechat_req",function(data){
      io.emit('singlechat_req', {
                from : data.from,
                id : data.id,
                type : data.type,
                to : data.to
            });
    });
    socket.on('singlechat',function(data){
        
        var id = data.data.id;
            name  = data.data.from;
            type = data.data.type;
            to = data.data.to;
        for(var i in connectuser){
            if(connectuser[i].from == to){
              connectuser[i].iswork = "working";
            }
        }
        if(!singlechat.hasOwnProperty(name)){
          singlechat[name] = to;
          singlechat[to] = name;

        }
        
        io.emit('singlechat', {connectuser:connectuser,name:name,to:to,singlechat:singlechat});  
        console.log(name+'请求'+to+'客服服务');
        for(var i in singlechat)
          console.log("singlechat:"+singlechat[i]+'\n');

    });

    socket.on('filesendopen_req',function(data){
      io.emit('filesendopen_req', {
                from : data.from,
                to : data.to
            });
    });
    socket.on('filesendopen',function(data){
      io.emit('filesendopen', {
                from : data.from,
                to : data.to
              });
    });
    socket.on('sendfile',function(data){
      console.log("www+sendfile");
      console.log(data.path);
      io.emit('sendfile', {
                from:data.from,
                to:data.to,
                path:data.path
              });
    })

    // socket.on('singlechatinit',function(data){
    //   console.log(data.from);
    //   io.emit('singlechatinit',{
    //     name:data.from,
    //     to:singlechat[data.from]
    //   })
    // })



    socket.on('singlechatMeg',function(data){
        var name  = data.from;
            context = data.context;
            to = data.to;
        var time = new Date();//.format("yyyy-MM-dd hh:mm:ss");
          // years = time.getFullYear();
          // months = time.getMonth()+1;
          // days = time.getDate();
          // hours = time.getHours();
          // minutes = time.getMinutes();
          // seconds = time.getSeconds();
          //minutes = changetime(minutes);
          //hours = changetime(hours);
          //seconds = changetime(seconds);
        //var  time = new Date(changetime);
        var gettime = time.getTime();
        console.log("www_singlechatMeg",time);
        var New_history_message = new history_message({
          from:name,
          to:to,
          context:context,
          // years:years,
          // months:months,
          // days:days,
          // hours:hours,
          // minutes:minutes,
          // seconds:seconds,
          date:time,
          gettime:gettime
        });
        New_history_message.save(function(err){
          if(err){
            console.log("save_history_message_err");
          }
          else{
            console.log("save_history_message_success");
          }
        });

        for(var i in room){
          if(socket.id === room[i][0].id ||socket.id === room[i][1].id ){
            console.log("singlechatMeg");
            room[i][0].emit('singlechatMeg', {name:name,to:to,context:context});
            room[i][1].emit('singlechatMeg', {name:name,to:to,context:context});
          }
        }
        //io.emit('singlechatMeg', {name:name,to:to,context:context});
         //console.log(context);
    });
    socket.on('singlechatexit',function(data){
      var name = data.from;
      var to = data.to;
      if(singlechat.hasOwnProperty(name))
        delete singlechat[name];
      if(singlechat.hasOwnProperty(to))
        delete singlechat[to];
      for(var i in connectuser){
            if(connectuser[i].from == to&&connectuser[i].type === "service"){
              connectuser[i].iswork = "not working";
            }else if(connectuser[i].from == name&&connectuser[i].type === "service"){
              connectuser[i].iswork = "not working";
            }
        }
      io.emit('exit', {connectuser:connectuser,name:name,to:to});
      io.emit('singlechatexit',{name:name,to:to});

      console.log(name+" "+to+'客服服务结束');
    });

    socket.on('emergency',function(data){
      console.log("server get emergency");
       var length = room.length;
       var i = Math.ceil(Math.random()*length)-1;
      console.log(i);
      room[i][0].emit('emerg',{
                                    id:data.id,
                                    type:data.type,
                                    from:data.from
      });
      room[i][1].emit('emerg',{
                                    id:data.id,
                                    type:data.type,
                                    from:data.from
      });
       
      console.log("server send emergency");
   
        
      
    });

    socket.on("history_message",function(data){
    
    console.log('history_message_before');
    var Newhistory_message = new history_message({
       from:data.from,
       to:data.to,
       context:"",
       date:"",
       gettime:0
    });
    // var from_time = data.from_time.split('-');
    // var to_time = data.to_time.split('-');
    // for(var i in from_time){
    //   from_time[i] = Number(from_time[i]);
    //   to_time[i] = Number(to_time[i]);
    // }
    Newhistory_message.findhistory(data.from,data.to,data.from_time,data.to_time,function(err,history_message){
       if(err){
        console.log("history_message_err");
       }
       else {
       
        console.log("www_history"+history_message);
        // console.log(history_message[0].context);

        // console.log(history_message[1].context);

        // console.log(history_message[2].context);
		socket.emit("history_message",{
			from:data.from,
			to:data.to,
			history_message:history_message
			});
       }
       
    });

    })
  

}); 

Date.prototype.format = function (format) {
           var args = {
               "M+": this.getMonth() + 1,
               "d+": this.getDate(),
               "h+": this.getHours(),
               "m+": this.getMinutes(),
               "s+": this.getSeconds(),
               "q+": Math.floor((this.getMonth() + 3) / 3),  //quarter
               "S": this.getMilliseconds()
           };
           if (/(y+)/.test(format))
               format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
           for (var i in args) {
               var n = args[i];
               if (new RegExp("(" + i + ")").test(format))
                   format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? n : ("00" + n).substr(("" + n).length));
           }
           return format;
       };


// function changetime(data){
//       if(data < 10){
//         return "0"+data;
//       }
//       return data;
//     } 
//---------------------------------------------------
/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
